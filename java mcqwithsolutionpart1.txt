
Day 1: fundamental questions/baics questions:
------------------------------------------

what is the op?
------------
long a=9958543978;
System.out.println(a);
out:-  error range of literal int is more .

what is the op?
-----------------
char i=97; //storing int into char
System.out.println(i);
output=a	

char i='A'; //storing int into char
System.out.println(i);
o/p=65




What is the op?
--------------
	int i=028;
	System.out.println(i);
o/p=24


Note: No starting from 0 are octal, 0-7 
      how to convert octal to int
	
	0 2 6 
	  2*8 power 1 +  6*8 power 0
	  2*8+6=22


What is the op?
---------------

	byte i=33;
	byte j=22;
	byte k=i+j;
	System.out.println(k);
	    error : showing recommendation
            change type of k from byte to int to resolve the error

Note : range of byte (8 bits): -128 0 to +127

important concept:
public class Java{
    public static void main(String[] args){
        final byte x = 1;
        final byte y = 2;
        byte z = x + y;//ok
        System.out.println(z);

        byte a = 1;
        byte b = 2;
        byte c = a + b; //Compiler error
        System.out.println(c);
    }
}


byte z = x + y;  // x and y are declared final
Here, since x and y are declared final so the value of expression on the RHS is known at compile time,
 which is fixed at (1 + 2 = 3) and cannot vary. So, you don't need to typecast it explicitly

byte c = a + b;   // a and b are not declared final
Whereas, in this case, value of a and b are not declared final. So, the value of expression is not known at compile time, rather is evaluated at runtime. 
So, you need to do an explicit cast.





what is the op?
---------------
	  int $=44;
	  System.out.println($);
output:44



How to write a program to call main twice?
----------------------------------------
Hint: static init  block
call the main method in the static init block.
Sample code is here
:
class TestMain { 
 
    static
    { 
        main(new String[] { "Hello" }); 
    } 
    public static void main(String[] args) 
    { 
        System.out.println("Hii"); 
    } 
} 
output will be
Hii
Hii
explanation:Static block is executed even before the main() executed. 
Here first, main() get called by static block and then JVM(Java Virtual Machine) call the main(). 
So, main() is executed two times by calling only one time.

note:  here Hello will not print because it is passing in the args array which we not use in main definition.

What happens if we comment 
------------------------------
// \u000d System.out.println("i love java");
note:-print i love java 

explaination:
This is because unicode decoding takes place before any other lexical translation, and
\u000d corresponds to a newline character which terminates the comment.




Can we comment Unicode Carriage Return?
you can but we get to the new line because it takes place before lexical translation.



What is the op?
------------

		int String =33;
		System.out.println(String);
output:33



	


What is the op?
--------------	
public class Demo3 {
	
	public static void main(String[] args) {
		System.out.println("500");
		System.exit(0);
		System.out.println("600");
	}

}
out=500
note :-n if we call main twice here then also the output remain same

What is the op? Dry run:
----------------
public class Demo2 {

	public static void main(String[] args) {
		int x[]={2,3,4,-4,5,6,7,9};
		int loc=0;
		int i=0;
		for( i=0;i<x.length; i++){
			if(x[i]==-4)
				break;
			loc++;
		}
		
		int j=loc;
		int k=x.length;
		while(j<k-1){
			x[j]=x[j+1];
			j++;
		}
		
		for(int temp: x)
			System.out.print(temp+":");
	}

}
op-2:3:4:5:6:7:9:9:


What is the op?
---------------

enum Enums{
	A,B,C;
	private Enums(){
		System.out.println("10");
	}
}
public class Demo3 {
	
	public static void main(String[] args) {
		Enums e=Enums.B;
	}

}











What is the op?
----------------
//doubt
public class Demo4 {
	//java Demo3 1 2 3
	public static void main(String[] args) {
		String [][]arguments=new String[2][2];
		int x= 0;
		arguments[0]=args;
		x=arguments[0].length;
		for(int y=0;y<x;y++){
			System.out.println(" "+ arguments[0][y]);
		}
		
	}

}

op-
1
2
3
Dry run:
----------
    class Demo {
        public static void main(String args[])
        {
            int num[] = {5, 10, 11, 12, 56, 2};
            int result;
            result = 0;
            for (int i = 0; i < 6; ++i) 
                result = result + num[i];
	    System.out.print((double)result/6);
 
        } 
    }

op-16.0

Dry run:
--------
public class Demo3 {
	public static void main(String[] args) {

		  char array_variable [] = new char[10];
		    for (int i = 0; i < 10; ++i) {
	                array_variable[i] = 'i';
	                System.out.print(array_variable[i] + "" );
	                i++;
	            }
	}
}

op-iiiii
Dry run :
---------
public class Demo3 {
	// java Demo3 1 2 3
	public static void main(String[] args) {
		int arr[][]=new int[3][];
		arr[0]=new int[1];
		arr[1]=new int[2];
		arr[2]=new int[3];
		
		int sum=0;
		for(int i=0;i<3; ++i)
			for(int j=0;j<i+1;++j)
				arr[i][j]=j+1;
		
			for(int i=0;i<3;++i)
				for(int j=0;j<i+1;++j)
					sum+=arr[i][j];
			System.out.println(sum);
	}
}


//Ans : 10



What is the op?
------------
public class Demo5 {
	public static void main(String[] args) {
		final int a=2, b=3;
		while(a<b){
			System.out.println("hello");
		}
		System.out.println("bye");
	}
}

op-error
unreachable statement (bye)









Q1



public class Person{
     public String name;
public static void main(String str[]){
  Person p=null;
   System.out.print(p instanceof Person);
}



Ans-false








What is the result of compilation or execution of the code?
1. Prints false
2. Prints true
3. Results in compilation error
4. Results in runtime error

Ans: option1 is correct

Q2. Which of these statements are true?

A. If a RuntimeException is not caught, the method will terminate and normal
execution of the thread will resume.
B. An overriding method must declare that it throws the same exception classes as the
method it overrides.
C. The main method of a program can declare that it throws checked exceptions.
D. finally blocks are executed if and only if an exception gets thrown while inside the
corresponding try block.

Ans -c
exp:Normal execution will not resume if an exception is uncaught by a method. The exception will propagate up the method invocation stack until some method handles it. 
If no one handles it then the exception will be handled by the JVM and the JVM will terminated that thread.
An overriding method only needs to declare that it can throw a subset of the exceptions the overridden method can throw.
Having no throws clause in the overriding method is OK.





Q3. Which of the following is false?
A. Class name and constructor name must be same
B. Constructor does not have return type
C. Constructor must be public
D. Constructor cannot be static



op-c



Q4. What will be the result of compiling and running the following code?
class Base{
public short getValue(){ return 1; } //1
}
class Base2 extends Base{
public byte getValue(){ return 2; } //2
}
public class TestClass{
public static void main(String[] args){
Base b = new Base2();
System.out.println(b.getValue()); //3
}
}
Select 1 option
A. It will print 1
B. It will print 2.
C. Compile time error at //1
D. Compile time error at //2
op-D
exp
In case of overriding, the return type of the overriding method must match exactly to the return type of the overridden method if the return type is a primitive.
(In case of objects, the return type of the overriding method may be a subclass of the return type of the overridden method.)


Q5.  Which of the following are valid classes?

Select 1 option
A.abstract public class ImaginaryNumber extends Number {
}
B. public class ThreeWayBoolean extends Boolean {
}
C. public class NewSystem extends System {
}
D. public class ReverseString extends String {
}

op=A

exp:
String, StringBuilder, and StringBuffer - all are final classes.
1. Remember that wrapper classes for primitives (java.lang.Boolean, java.lang.Integer, java.lang.Long, java.lang.Short etc.) are also final and 
so they cannot be extended.
2. java.lang.Number, however, is not final. Integer, Long, Double etc. extend Number.
3. java.lang.System is final as well.










Q8. Which of the following statements are true?

A. Private methods cannot be overridden in subclasses.

B. A subclass can override any method of a non-final superclass.

C. An overriding method can declare that it throws a wider
 spectrum of checked exceptions than the method it is overriding.

D. The parameter list of an overriding method must be a 
 subset of the parameter list of
 the method that it is overriding.
op=A

exp:
A method can be overridden by defining a method with the same signature(i.e. name and parameter list) and return type as the method in a superclass. 
The return type can also be a subclass of the original method's return type.

Only methods that are accessible can be overridden. A private method cannot, therefore, be overridden in subclasses, 
but the subclasses are allowed to define a new method with exactly the same signature.

A final method cannot be overridden.

An overriding method cannot exhibit behavior that contradicts the declaration of the original method. 
An overriding method, therefore, cannot return a different type (except a subtype) or throw a wider spectrum of exceptions than the original method in the superclass.

A subclass may have a static method with the same signature as a static method in the base class but it is not called overriding. 
It is called shadowing because the concept of polymorphism doesn't apply to static members.










What is the op?
---------------------

class T{
	public static final int temp=100;
	static {
		System.out.println(" i am static block");
	}
}
public class Demo {

	public static void main(String[] args) {
		
		System.out.println(T.temp);
	}
}

op=100
why?
ans :- code optimization because class will not load only 100 will get replace thats why o/p is 100, if we remove the final then static block execute

Ex: what is the op?

String demo="one"+2*2+"threee";

op=one4threee



What happens?

public class Demo {

	Demo(){
		System.out.println("inside ctr");
	}
	Demo demo=new Demo();
	public static void main(String[] args) {
		
		new Demo();
		
	}
}

op=error
why?









interface A{
	public static final int i=0;
	void foo();
}
abstract class B implements A{
   void foo(){
  }
}








default void foof(){}
static void foofStatic(){}

Note: Since Java8 static methods and default methods are introduced in interfaces.

//default 

Default Methods - Unlike other abstract methods these are the methods can have a default implementation.
If you have default method in an interface, it is not mandatory to override (provide body) it in the 
classes that are already implementing this interface.
In short, you can access the default methods of an interface using the objects of the implementing classes.


//code example
interface MyInterface{
   public static int num = 100;
   public default void display() {
      System.out.println("display method of MyInterface");
   }
}
public class InterfaceExample implements MyInterface{
   public static void main(String args[]) {
      InterfaceExample obj = new InterfaceExample();
      obj.display();
   }
}

output: display method of MyInterface



//static method in interface

They are declared using the static keyword and will be loaded into the memory along with the interface. 
You can access static methods using the interface name.
If your interface has a static method you need to call it using the name of the interface, 
just like static methods of a class.

//code
interface MyInterface{
   public void demo();
   public static void display() {
      System.out.println("This is a static method");
   }
}
public class InterfaceExample{
   public void demo() {
      System.out.println("This is the implementation of the demo method");
   }
   public static void main(String args[]) {
      InterfaceExample obj = new InterfaceExample();
      obj.demo();
      MyInterface.display();
   }
}
output:
This is the implementation of the demo method
This is a static method

Difference between static and default methods −
Calling the method
You can call a static method using the name of an interface.
To call a default method you need to use the object of the implementing class.
Overriding the method
If you want, you can override a default method of an interface from the implementing class.



What is the o/p?
------------------
public class DemoInteger {
	
	public static void main(String[] args) {
		Integer i1=127;
		Integer i2=127;
		System.out.println(i1==i2);
		
		Integer i3=128;
		Integer i4=128;
		System.out.println(i3==i4);
	}
}
op:
true
false
exp
Integer.ValueOf() method creates the java.lang.Integer object by passing the specified ‘int‘ value. 
Actually, it doesn’t create the new objects for all the values you pass. 
This method is implemented such that the frequently used values are cached. I.e. 
internally it maintains an array of Integer objects where Integer objects for frequently requested values are created and 
stored at the time of VM initialization itself. By default, these values will be from -128 to 127. So, for any number you pass between -128 and 127 (inclusive), 
it doesn’t create the new Integer object. Instead it returns already cached object from the array. If you pass the number beyond this range, 
then only it creates a new Integer object.
 Below is the source code of Integer.valueOf() method






// Integer.valueOf();
Integer cache ( for performance)



call by val vs call by ref
---------------------------
public class DemoStrange {
	public static void main(String[] args) {
		int x=50;
		String s="0";
		
		minInt(x, 20,10);
		maxInt(s, 20, 10);
		
	}

	private static void maxInt(String s, int i, int j) {
		if(i>j)
			s=new Integer(i).toString();
		else
			s=new Integer(j).toString();
			
			System.out.println(s);
	}

	private static void minInt(int min, int i, int j) {
		if(i>j)
			min=j;
		else
			min=i;
			
			System.out.println(min);
	}
}

output:-
10
20


null with static method : What will be the O/P?
------------------

class A{
	public static void foo(){
		System.out.println(" i am static  method");
	}
}
public class DemoStatic {
	public static void main(String[] args) {
		A a=null;
		a.foo();	
	}
}


op: i am a static method
why?


Which code with compile?
-----------------------------
	function overloading

		Integer val=new Integer(null);
		String s=new String (null);


class A1{
	void foof(String a){
		System.out.println("void foof(String a)");
	}
	void foof(Integer a){
		System.out.println("void foof(Integer a)");
	}
}
public class DemoOverloading {

	public static void main(String[] args) {
		A1 a=new A1();
		a.foof(null);
	}

}



output:
a.foof(null);
		 ^
  both method foof(String) in A1 and method foof(Integer) in A1 match




















ambigous ctr call
------------------
What if i run it?








What is the op?
---------------------


		Set<String> s=new HashSet<String>();
		s.add("QA");
		s.add("dev");
		System.out.println(s);

		
		Set<String> s2=new HashSet<String>(){{
			add("QA"); 
			s.add("dev");
		}};
		
		System.out.println(s2);














		=> double brace init {{ }}
		=> first brace create an annomous class and inner brace is used to init....... 





What is the op?
--------------------

public class DemoNeverWriteThisCode {

	public static void main(String[] args) {

		System.out.println(returnSomething());
		
	}

	private static int returnSomething() {
		try{
			return 5;// throws new NullPointerException();
		}finally{
			return 9;
		}
	}

}

output: 
9
want to know why we can not return integer in try block(we can not throw integer because we can only throw objects )








	=>maigic of finally
	=>never ever return value from finally block ? why? 





autoboxing, int and wrapper classes
----------------------------------

What is the op?
---------------
public class DemoOverloadingVsOverriding {

	public static void main(String[] args) {
		Long l=new Long(0);
		System.out.println(l.equals(0));
	}
}


output : false

for output to be true change code to
public class DemoOverloadingVsOverriding {

	public static void main(String[] args) {
		Long l=new Long(0);
		System.out.println(l.equals(0l));
	}
}


Note:
The equals() java method compares this object to the specified object.
 The result is true if and only if the argument is not null and 
is a Long object that contains the same long value as this object.
This method is overrides equals in class Object




What is the O/P?
-----------------
class Cat{
	public static void meow(){
		System.out.println("meow");
	}
}

class CostlyCat extends Cat{
	public static void meow(){
		System.out.println("costly meow");
	}
}
public class DemoStaticMethod {
	public static void main(String[] args) {
		Cat c=new CostlyCat();
		c.meow();
	}


}
op=meow




What is the O/P?
-----------------



class Cat{
	public static String foo="value";
}

class CostlyCat extends Cat{
	 private static String foo="value2";
}
public class Demo {

	public static void main(String[] args) {

		System.out.println(new CostlyCat().foo);
	}
}

op=error acess is private 
note:
here in costly cat if we hange access specifier to public then it will print value2
but if we slight change the code like:
Cat c=new CostlyCat();
		System.out.println(c.foo);
then output will be value  because polymorphism does not work for variables:)



	=>hiding superclass variable method


What is the O/P?
-----------------

Autoboxing, Inheritance and Overriding
--------------------------------------
class A{
	
	void method(int i){
		System.out.println("base method ");
	}
}
class B extends A{
	void method(Integer i){
		System.out.println("overriden method ");
	}
	
}
public class DemoOverloadingVsOverriding {

	public static void main(String[] args) {
		A a=new B();
		a.method(22);
	}
}
output is 
base method 
because method is not overrided it is overloaded thats why base method print 

for overriding simply change the code as
class A{
	
	void method(int i){
		System.out.println("base method ");
	}
}
class B extends A{
	void method(int i){
		System.out.println("overriden method ");
	}
	
}
public class DemoOverloadingVsOverriding {

	public static void main(String[] args) {
		A a=new B();
		a.method(22);
	}
}

output:
overriden method.















Constructor overloading and NULL
---------------------------------

What is the op?
------------------


public class Confusion {

	public Confusion(Object o){
		System.out.println("public Confusion(Object o)");
	}
	
	public Confusion(double[] o){
		System.out.println("public Confusion( double[] o)");
	}
			
	public static void main(String[] args) {
		
		new Confusion(null);
		
	}
	
}

output:
public Confusion( double[] o)
it first matches the exact match and in java array is object thats why that constructor called.










character addition, subtraction
-------------------------------

		System.out.println("H" + "i");
		System.out.println('H'+'i');
Ans:
Hi
177
in case of string it simply concatenate and in case of char convert them to there ascii value and add them






















What is the op?
------------------

	class Foo {
		private int i;
	
		public Foo(int i) {
			this.i = i;
		}
	
		public boolean equals(Foo obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Foo other = (Foo) obj;
			if (i != other.i)
				return false;
			return true;
		}
	
	}
	
	public class Confusion {
	
		public static void main(String[] args) {
	
			Object f1 = new Foo(22);
			Object f2 = new Foo(22);
			
			System.out.println(f1==f2);
	
		}
	
	}

output is false
also if we write f1.equals(f2) then also we get output as false



double subtraction and BigDecimal
----------------------------------
double 
1.0000000000000
1.0

What is the op?
-------------

		double d=1.1-1.00;
		
		if(d==0.10)
			System.out.println("hello");
		else
			System.out.println("hi");
Why?
explaination:
output:-hi
because there is precision error this problem can be resolved by using BigDecimal Class of math package.



Also lets have a look in this code
import java.math.BigDecimal; 
public class DemoOverloading {

	public static void main(String[] args) {
float d=1.1f;
		
		if(d==1.1)
			System.out.println("hello");
		else
			System.out.println("hi");
	}

}
output:
hi
because 1.1 at if condition is treated as double.(if you write 1.1f then it will give hello).


	=> never compare double , float , object with ==
	=> actual value of d is not 0.10

	What to do?
	---------
	=> if you want to manipulate double never use double / float
	use BigDecimal class

	Correct approach?
	----------------
	BigDecimal d2=new BigDecimal("1.10").subtract(new BigDecimal("1.00"));
		System.out.println(d2);
		
		
		if(d2.doubleValue()==0.10)
			System.out.println("hello");
		else
			System.out.println("hi");

output:
0.10
hello
because of using BigDecimal we get the correct value after subtraction if we did not use that we get hi as output.

Need Of BigDecimal

The two java primitive types(double and float) are floating point numbers, 
which is stored as a binary representation of a fraction and a exponent.
Other primitive types(except boolean) are fixed-point numbers. 
Unlike fixed point numbers, floating point numbers will most of the times return an answer with a small error 
(around 10^-19) This is the reason why we end up with 0.009999999999999998 as the result of 0.04-0.03 .
But BigDecimal provides us with the exact answer.












What is the op?
---------------------

public class Confusion {
	private static Random random=new Random();
	public static void main(String[] args) {
		StringBuffer word=null;
		switch (random.nextInt(5)) {
		case 1:
			word=new StringBuffer('M');
			break;

		default:
			word=new StringBuffer('N');
		}
	
		word.append('a');
		word.append('b');
		
		System.out.println(word);
	}

}







	=> StringBuffer Constructor and Char








Random with seed
-----------------
What is the op?
-----------------

public class Confusion {

	public static void main(String[] args) {
		
		Set<Integer> s=new HashSet<Integer>();
		
		for(int i=0;i<100;i++)
			s.add(myMethod());
	}

	private static Integer myMethod() {
		return new Random(12345678L).nextInt();
	}

}



What is the op?
----------------
	
	class MyEx extends Exception {
		int details;
	
		MyEx(int a) {
			details = a;
		}
	
		public String toString() {
			return "details";
		}
	}
	
	public class DemoException {
	
		static void compute(int a) throws MyEx {
	
			throw new MyEx(a);
		}
	
		public static void main(String[] args) {
			try {
				compute(3);
			} catch (ArithmeticException ex) {
				System.out.println(ex);
			}
		}
	}

output: error 
exp :
in catch must use MyEx or Exception for getting result details otherwise it will throw error at console.

What is the op?
----------------
	
	public class Main_arg {
		//pass 1 2 3
		public static void main(String[] args) {
			
			String[][]arguments=new String[2][2];
			int x;
			arguments[0]=args;
			x=arguments[0].length;
			
			for(int y=0; y< x; y++){
				System.out.println(" "+arguments[0][y]);
			}
		}
	
	}

1
2
3

Why op?
Correct approach:

return new Random().nextInt();












What is the op?
------------------

class String {
}

public class SimpleCode {
	public static void main(String[] args) {
		System.out.println("hi");
	}

}
because it get confuse in the main parameter because in main method it is of java.lang.String but it will assume it is of class we declare above so to resolve error in this the string[]args in
main method should replace by java.lang.String




error: main method not found 
why?


What is the op?
--------------
		final int a=10, b=20;
		
		while(a<b){
			System.out.println("hello");
		}
	

		System.out.println("world");//2

output: never reachable statement at  //2 but if we remove final then it will print hello until the condition remains true(i.e infinite in this case)


What is the op?
-----------------
		
		String[][]arguments=new String[2][2];
		int x;
		arguments[0]=args;
		x=arguments[0].length;
		
		for(int y=0; y< x; y++){
			System.out.println(" "+arguments[0][y]);
		}


	explained above.

what is the op?
-------------

		StringBuffer sb=new StringBuffer('A');
		sb.append("C");
		System.out.println(sb);

op=c
doubt:-if we change 'A' to "A"
then it will give AC why?

What is the op?
-----------------
	String s="hcl technologies";
		s.toUpperCase();
		System.out.println(s);
		
		System.out.println(s.indexOf("te"));
		
									 
	StringBuffer sb=new StringBuffer("ABCDE");
		//sb.setCharAt(3, 'X');
		sb.replace(2, 3, "PP");
		System.out.println(sb.toString());

op-hcl technologies
4
ABPPDE


Q: how to print no of occurance of an particular char in a string?
 Ex: i love java find no of no of occurance of a?

Q. How to print reverse of an string
Ans: code uploaded
Q. Checking for pallindrom 
Q. Reverse the string as explained:
	i love java and teaching
Ans: code uploaded

 Ex1:	teaching and java love i
 Ex2:   gnihcaet dna avaj evol i


a a b b c c d d u e e
0 1 2 3 4 5 6 7 8 9 10

what is the op? Dry run
----------------------------
		String val="aabbccdduee";
		char[]arr=val.toCharArray();
		boolean isOrdered=true;
		for(int i=1; i< arr.length; i++){
			if(arr[i]<arr[i-1]){
				isOrdered=false;
				break;
			}
		}
		System.out.println(isOrdered);


op=false









note: left side should be abstract side and right side should be concrete;(e.g vehicle a=new metro()(;)
can change java version
step 1 right click->properties->project facets->then change at java

java decompiler


always provide default constructor is a gpp;

note:- default method study here default is not access specifier
default public void foo{sop("default method in interface");}
why we have this method 

when we have to use interface andd when an abstract class?
interface break the hierrachy?

jb hierarchy different ho but kuch properties same ho then we prefer interface over abstract class

use throws at model layer and try/catch at controller





memory leak-memory hai but m use na kr para 

local variable can only be declare as final only
strictfp in java 

abstract a extends Number{} will compile but a extends String{} will not because String is final class




The key points for immutable are:

no setters methods
make variables private and final
return lists using Collections.unmodifiableList - never return any mutable field; always return either a copy (deep if appropriate) or an immutable version of the field
make class final
if variables are changed internally in the class this change is not visible and has no effect outside of the class (including affecting things like equals() and hashcode()).



String s=new String("in"); //creates two objects)
String s="in";//creates one object


interface is abstraction of behaviour














 1



