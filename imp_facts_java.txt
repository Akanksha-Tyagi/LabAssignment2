Ques1:

class Test { 
    public static void main(String[] args) { 
        for(int i = 0; 1; i++) { 
            System.out.println("Hello"); 
            break; 
        } 
    } 
} 
Output: Compiler Error
There is an error in condition check expression of for loop. Java differs from C++(or C) here. C++ considers all non-zero values as true and 0 as false. 
Unlike C++, an integer value expression cannot be placed where a boolean is expected in Java. Following is the corrected program.


Ques2:

class Test { 
   public static void main(String args[]) { 
       System.out.println(fun()); 
   } 
   static int fun() { 
       static int x= 0; 
       return ++x; 
   } 
} 
Output: Compiler Error
Unlike C++, static local variables are not allowed in Java.

Ques 3:
package main; 
  
class Point { 
    protected int x, y; 
  
    public Point(int _x, int _y) 
    { 
        x = _x; 
        y = _y; 
    } 
} 
  
public class Main { 
    public static void main(String args[]) 
    { 
        Point p = new Point(); 
        System.out.println("x = " + p.x + ", y = " + p.y); 
    } 
} 
Output:

Compiler Error
The problem with the code is: there is no default constructor in Point.


public class Test2 {    
    Test1 t1 = new Test1(10);   
  
    Test2(int i) { t1 = new Test1(i); } 
    //Test2 t2 = new Test2(5);
    public static void main(String[] args) {    
         Test2 t3 = new Test2(5);
    }
}


output will be
Constructor called 10
Constructor called 5


First t2 object is instantiated in the main method. As the order of initialization of local variables comes first than the constructor,first the instance variable (t1), 
in the class Test2 is allocated to the memory. In this line a new Test1 object is created, constructor is called in class Test1 and ‘Constructor called 10’ is printed. 
Next the constructor of Test2 is called and again a new object of the class Test1 is created and ‘Constructor called 5’ is printed.


but if we remove Test2 comment then it will print constructor callled 10 until stack overflow 

note: Default is more restrictive then protected

public class Main 
{ 
    public static void main(String args[]) 
    { 
        short s = 0; 
        int x = 07; 
        int y = 08; //line 8
        int z = 123456; 
  
        s += z; //line 10
        System.out.println("" + x + y + s); 
    } 
} //end class 
Output:

Compile Error at line 8
Explanation:
1. In Line 12 The “” in the println causes the numbers to be automatically cast as strings. So it doesn’t do addition, but appends together as string.
2. In Line11 the += does an automatic cast to a short. However the number 123456 can’t be contained within a short, so you end up with a negative value (-7616).
(NOTE – short 2 bytes -32,768 to 32,767), Here the number 123456 doesn’t mean the Value of int z,it shows the length of the int value
3. Those other two are red herrings however as the code will never compile due to line 8.
Any number beginning with zero is treated as an octal number (which is 0-7).


imp point: in line 10 if we replace s+=10 -> s=s+z then it will give typoe mismatch error.


class Test1 {   
    Test1(int x) {
        System.out.println("Constructor called " + x);
    }
}
  
// This class contains an instance of Test1 
public class Test2 {    
    Test1 t1 = new Test1(10);   
  
    Test2(int i) { t1 = new Test1(i); } 
    //Test2 t2 = new Test2(5);
    public static void main(String[] args) {    
         Test2 t3 = new Test2(5);
    }
}


output will be
Constructor called 10
Constructor called 5


First t2 object is instantiated in the main method. As the order of initialization of local variables comes first than the constructor,first the instance variable (t1), 
in the class Test2 is allocated to the memory. In this line a new Test1 object is created, constructor is called in class Test1 and ‘Constructor called 10’ is printed. 
Next the constructor of Test2 is called and again a new object of the class Test1 is created and ‘Constructor called 5’ is printed.


but if we remove Test2 comment then it will print constructor callled 10 until stack overflow 
and if we put static at test2 t2 statement it will print 
Constructor called 10
Constructor called 78
Constructor called 10
Constructor called 5


public class Test 
{ 
	static Test t ; 
	
	static int count =0; 
	
	public static void main(String[] args) throws InterruptedException 
	{ 
		Test t1 = new Test(); 
			
		// making t1 eligible for garbage collection 
		t1 = null; // line 12 
			
		// calling garbage collector 
		System.gc(); // line 15 
			
		// waiting for gc to complete 
		Thread.sleep(1000); 
	
		// making t eligible for garbage collection, 
		t = null; // line 21 
			
		// calling garbage collector 
		System.gc(); // line 24 
	
		// waiting for gc to complete 
		Thread.sleep(1000); 
			
		System.out.println("finalize method called "+count+" times"); 
		
	} 
	
	@Override
	protected void finalize() 
	{ 
		count++; 
		
		t = this; // line 38 
			
	} 
	
} 


Output:

finalize method called 1 times
Explanation :
After execution of line 12, t1 becomes eligible for garbage collection. 
So when we call garbage collector at line 15, Garbage Collector will call finalize() method on t1 before destroying it. 
But in finalize method, in line 38, we are again referencing the same object by t, so after execution of line 38,this object is no longer eligible for garbage collection. 
Hence, Garbage Collector will not destroy the object.

Now again in line 21, we are making same object eligible for garbage collection one more time. 
Here, we have to clear about one fact about Garbage Collector i.e. it will call finalize() method on a particular object exactly one time. 
Since on this object, finalize() method is already called, so now Garbage Collector will destroy it without calling finalize() method again.

When overriding a method of superclass, the method declaration in subclass cannot be more restrictive than that declared in the superclass.(note if we do that we get compile time error )

if we try to access private method (of base class in case derived does not have same method) then also we get compile time error;


Which of the following is FALSE about finally block?
a) For each try block, there can be only 1 finally block.
b) finally block will not be executed if program exits by calling System.exit();
c) If an exception is not handled in the catch statement, before terminating the program, JVM executes the finally block
d) finally block contains important code segment and so the code inside finally block is executed with/without the presence of try block in java code.

Answer (d)
Explanation:Statement (d) is false because finally blocks can exist only if it succeeds try or a catch block. Using a finally block without try block would give a compile time error.


public class Test2 {    
   
    public static void main(String[] args) { 
    	//Note: \u000A System.out.println("hello");
         char c=0x000A;
         System.out.println("c: "+c);
    }
}

output:
hello
c:

In Java, it is not allowed to put the size of the array in the declaration because an array declaration specifies only the element type and the variable name. 
The size is specified when you allocate space for the array. Even the following simple program won't compile.
class Test {
   public static void main(String args[]) {
     int arr[5];   //Error
   }
}




class Test
{
    public static void main (String[] args) 
    {
        int arr1[] = {1, 2, 3};
        int arr2[] = {1, 2, 3};
        if (arr1.equals(arr2))
            System.out.println("Same");
        else
            System.out.println("Not same");
    }
}

output: Not same
arr1.equals(arr2) is same as (arr1 == arr2) 

explain >>> operator.
Explaination:

 >>> (Unsigned right shift) In Java, the operator ‘>>>’ is unsigned right shift operator. It always fills 0 irrespective of the sign of the number.

filter_none
edit
play_arrow

brightness_4
class Test { 
    public static void main(String args[])  { 
  
       // x is stored using 32 bit 2's complement form.  
       // Binary representation of -1 is all 1s (111..1)        
       int x = -1;   
  
       System.out.println(x>>>29);  // The value of 'x>>>29' is 00...0111 
       System.out.println(x>>>30);  // The value of 'x>>>30' is 00...0011  
       System.out.println(x>>>31);  // The value of 'x>>>31' is 00...0001  
   }     
}  
Output:

7
3
1

Java doesn't support default arguments. In Java, we must write two different functions.
 Methods that throws different exceptions are not overloaded as their signature are still the same.

public class Test 
{ 
	private String function(float i, int f) 
	{ 
		return ("gfg"); 
	} 
	private String function(double i, double f) 
	{ 
		return ("GFG"); 
	} 
	public static void main(String[] args) 
	{ 
		Test obj = new Test(); 
		System.out.println(obj.function(1., 20));	 
	} 
} 

ans: GFG
class Test
{
    int a = 1;
    int b = 2;
 
    Test func(Test obj)
    {
        Test obj3 = new Test();
        obj3 = obj;
        obj3.a = obj.a++ + ++obj.b;
        obj.b = obj.b;
        return obj3;
    }
 
    public static void main(String[] args)
    {
        Test obj1 = new Test();
        Test obj2 = obj1.func(obj1);
 
        System.out.println("obj1.a = " + obj1.a + "  obj1.b = " + obj1.b);
        System.out.println("obj2.a = " + obj2.a + "  obj1.b = " + obj2.b);
 
    }
}

output:
obj1.a = 4  obj1.b = 3
obj2.a = 4  obj2.b = 3


public class Test implements Runnable 
{ 
	public void run() 
	{ 
		System.out.printf(" Thread's running "); 
	} 

	try
	{ 
		public Test() 
		{ 
			Thread.sleep(5000); 
		} 
	} 
	catch (InterruptedException e) 
	{ 
		e.printStackTrace(); 
	} 
	
	public static void main(String[] args) 
	{ 
		Test obj = new Test(); 
		Thread thread = new Thread(obj); 
		thread.start(); 
		System.out.printf(" GFG "); 
	} 
} 


//output:
 A constructor cannot be enclosed inside a try/catch block.


class Clidder  
{ 
    private final void flipper()  
    { 
        System.out.println("Clidder"); 
    } 
} 
  
public class Clidlet extends Clidder  
{ 
    public final void flipper()  
    { 
        System.out.println("Clidlet"); 
    } 
    public static void main(String[] args)  
    { 
        new Clidlet().flipper(); 
    } 
} 
Output:

Clidlet
Explanation: Although a final method cannot be overridden, in this case, the method is private, and therefore hidden.
The effect is that a new, accessible, method flipper is created.
Therefore, no polymorphism occurs in this example, the method invoked is simply that of the child class, and no error occurs.


//not done
public class Juggler extends Thread  
{ 
    public static void main(String[] args)  
    { 
        try 
        { 
            Thread t = new Thread(new Juggler()); 
            Thread t2 = new Thread(new Juggler()); 
        } 
        catch (Exception e)  
        { 
            System.out.print("e "); 
        } 
    } 
    public void run()  
    { 
        for (int i = 0; i < 2; i++)  
        { 
            try 
            { 
                Thread.sleep(500); 
            } 
            catch (Exception e)  
            { 
                System.out.print("e2 "); 
            } 
            System.out.print(Thread.currentThread().getName()+ " "); 
        } 
    } 
} 

Output: No Output
Explanation: In main(), the start() method was never called to start ”t” and ”t2”, so run() never ran.